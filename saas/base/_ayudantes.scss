@use "sass:map";

@mixin cssvars($css_variables, $prefix: tema) {
    @each $name, $value in $css_variables {
        --#{$prefix}-#{$name}: #{$value};
    }
}

@function cssvar ($name, $prefix: tema) {
    @return var(--#{$prefix}-#{$name});
}

@mixin cssvar($name, $value: '', $prefix: tema) {
    --#{$prefix}-#{$name}: #{$value};
}

@function evaluar-color($color) {
    @if contrast-ratio($color, $white) > $min-contrast-ratio {
        @return 'oscuro';
    } @else {
        @return 'claro';
    }
}

@function ajustar-matiz($color, $degrees) {
    @return hsl(hue($color) + $degrees, saturation($color), lightness($color));
}

@function ajustar-matiz-al-tema($color, $target-hue) {
    $current-hue: hue($color);
    $hue-difference: $target-hue - $current-hue;
    @if abs($hue-difference) > 180 {
        $hue-difference: $hue-difference - 360 * if($hue-difference > 0, -1, 1);
    }
    @return ajustar-matiz($color, $hue-difference);
}

@function color-con-gris($color, $cantidad) {
    $gray: mix(black, white, 50%);
    @return mix($color, $gray, $cantidad);
}

@function color-contraste($color) {
    @return color-contrast($color);
}

@function crear-escala-colores($color, $variations: 8) {
    $scale: ();
    $increment: 15;
    @for $i from 1 through $variations {
        $adjusted-color: adjust-hue($color, $increment * $i);
        $scale: map-merge($scale, ('color-p' + $i: $adjusted-color));
    }
    $scale: map-merge($scale, ('color-0': $color));
    @for $i from 1 through $variations {
        $adjusted-color: adjust-hue($color, -$increment * $i);
        $scale: map-merge($scale, ('color-n' + $i: $adjusted-color));
    }
    @return $scale;
}

@function crear-escala-monocromatica($color) {
    $scale: ();
    $lightness: lightness($color);
    @for $i from 1 through 9 {
        $new-color: mix($color, white, 10% * $i);
        $scale: map-merge($scale, ('mono-' + (50 + ($i - 1) * 50): $new-color));
    }
    $scale: map-merge($scale, ('mono-500': $color));
    @for $i from 1 through 9 {
        $new-color: mix($color, black, 10% * $i);
        $scale: map-merge($scale, ('mono-' + (950 - ($i - 1) * 50): $new-color));
    }
    @return $scale;
}

@function crear-esquema-color($color) {
    $analogo1: ajustar-matiz($color, 30deg);
    $analogo2: ajustar-matiz($color, -30deg);
    $triadico1: ajustar-matiz($color, 120deg);
    $triadico2: ajustar-matiz($color, 240deg);
    $opuesto: ajustar-matiz($color, 180deg);
    $tetradico1: ajustar-matiz($color, 60deg);
    $tetradico2: ajustar-matiz($color, 240deg);
    @return (
        'analogo1': $analogo1,
        'analogo2': $analogo2,
        'triadico1': $triadico1,
        'triadico2': $triadico2,
        'tetradico1': $tetradico1,
        'tetradico2': $tetradico2,
        'opuesto': $opuesto,
    );
}

@function cambiar-color($color, $weight) {
    @if evaluar-color($color) == 'oscuro' {
        @return if($weight > 0, mix($color, black, $weight), mix($color, white, -$weight));
    } @else {
        @return if($weight > 0, mix($color, white, $weight), mix($color, black, -$weight));
    }
}

@function generar-colores($color-base) {
    $complementary-color: ajustar-matiz($color-base, 180deg);
    $light-color: lighten($color-base, 15%);
    $dark-color: darken($color-base, 15%);
    $primary-color: saturate($light-color, 20%);
    $secondary-color: desaturate($dark-color, 20%);
    $danger-color: saturate(lighten(ajustar-matiz-al-tema($color-base, 0), 10%), 10%);
    $success-color: desaturate(lighten(ajustar-matiz-al-tema($color-base, 120), 10%), 10%);
    $info-color: desaturate(lighten($complementary-color, 10%), 10%);
    $warning-color: saturate(lighten(ajustar-matiz-al-tema($color-base, 60), 10%), 10%);
    $accent-color: ajustar-matiz($dark-color, 90deg);
    @if evaluar-color($color-base) == 'claro' {
        $danger-color: saturate(ajustar-matiz-al-tema($color-base, 0), 10%);
        $success-color: desaturate(ajustar-matiz-al-tema($color-base, 120), 10%);
        $info-color: desaturate($complementary-color, 10%);
        $warning-color: saturate(ajustar-matiz-al-tema($color-base, 60), 10%);
    }
    @return (
        'primary': $primary-color,
        'secondary': $secondary-color,
        'success': $success-color,
        'info': $info-color,
        'warning': $warning-color,
        'danger': $danger-color,
        'light': $light-color,
        'dark': $dark-color,
        'accent': $accent-color,
        'grayscale': grayscale($color-base),
    );
}
